@page "/profile"
@attribute [Authorize]

@inject UserInfoService UserInfoService
@inject IOrganizationService OrganizationService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" md="6">
        <MudPaper Class="p-4">
            <MudText Typo="Typo.h6">Your Profile</MudText>
            @if (user == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else
            {
                <MudList T="string">
                    <MudListItem>
                        <MudText><b>ID:</b> @user.Id.ToString()</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText><b>Username:</b> @user.Username</MudText>
                    </MudListItem>
                </MudList>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="p-4">
            <MudText Typo="Typo.h6">Invitations</MudText>
            @if (invitations == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!invitations.Any())
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary">No invitations</MudText>
            }
            else
            {
                @foreach (var invite in invitations)
                {
                    <MudPaper Class="p-2 mb-2 d-flex justify-content-between align-items-center">
                        <div>
                            <MudText Typo="Typo.subtitle2">@invite.Quiz.Name</MudText>
                        </div>
                        <div>
                            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" OnClick="() => RespondToInvitation(invite.InvitationId, true)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="() => RespondToInvitation(invite.InvitationId, false)" />
                        </div>
                    </MudPaper>
                }
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private UserInfo user = null!;
    private List<QuizInvitationDto>? invitations;

    protected override async Task OnInitializedAsync()
    {
        user = await UserInfoService.GetUserInfo();
        var invites = await OrganizationService.GetInvitations();
        invitations = invites.ToList();
    }

    private async Task RespondToInvitation(int id, bool accepted)
    {
        try
        {
            await OrganizationService.RespondToInvitation(
                new ApplicationResponseDto(id, accepted)
            );

            invitations = invitations?.Where(x => x.InvitationId != id).ToList();

            Snackbar.Add($"Invitation {(accepted ? "accepted" : "declined")}.", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Failed to respond to invitation.", Severity.Error);
        }
    }
}
