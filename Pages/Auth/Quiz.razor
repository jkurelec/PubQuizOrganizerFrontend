@page "/quiz/{quizId:int}"
@attribute [Authorize]

@inject IQuizService QuizService
@inject IQuizCategoryService CategoryService
@inject ILocationService LocationService
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation
@inject UserInfoService UserInfoService
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudPaper Class="pa-6 mt-4">

    @if (quiz == null)
    {
        <MudProgressCircular Indeterminate />
    }
    else
    {
        <MudGrid Class="mb-4 align-items-center">
            <MudItem xs="12" class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    <MudAvatar Size="Size.Large" Class="me-2">
                        <PublicImage ImageName="@quiz.ProfileImage"
                        ResourceType="MediaServerResource.Quiz"
                        CssClass="img-fluid rounded"
                        IsEditable="userHost?.IsOwner ?? false"
                        OnEditClicked="HandleQuizImageUpload" />
                    </MudAvatar>

                    <div>
                        @if (isEditingName)
                        {
                            <MudTextField @bind-Value="quizName"
                            Variant="Variant.Outlined"
                            Immediate="true"
                            AutoFocus="true"
                            OnKeyDown="HandleNameKeyDown"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Save"
                            OnAdornmentClick="SaveQuizName" />
                        }
                        else
                        {
                            <MudText Typo="Typo.h4">
                                @quiz.Name
                                @if (userHost?.IsOwner == true)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                    Color="Color.Primary"
                                    Class="ms-2"
                                    OnClick="() => StartEditingName()" />
                                }
                            </MudText>
                        }

                        <MudText Typo="Typo.subtitle2">Rating: @quiz.Rating | Editions Hosted: @quiz.EditionsHosted</MudText>
                        <MudText Typo="Typo.body2">
                            Organization:
                            <MudLink Href="@($"/organization/{quiz.Organization.Id}")">@quiz.Organization.Name</MudLink>
                        </MudText>
                    </div>
                </div>

                @if (userHost?.IsOwner == true && (quiz.QuizEditions?.Count() ?? 0) == 0 && (quiz.QuizLeagues?.Count() ?? 0) == 0)
                {
                    <MudItem>
                        <div class="ms-auto position-relative d-inline-block">
                            <MudButton Color="Color.Error"
                            Variant="Variant.Outlined"
                            Size="Size.Small"
                            StartIcon="@Icons.Material.Filled.Delete"
                            OnClick="() => showConfirmDelete = true"
                            @ref="deleteButtonRef">
                                Delete
                            </MudButton>

                            <MudPopover Open="@showConfirmDelete"
                            Class="pa-3">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Confirm deletion?</MudText>
                                <div class="d-flex justify-content-end">
                                    <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteQuiz">Delete</MudButton>
                                    <MudButton Size="Size.Small" Variant="Variant.Text" Class="me-2" OnClick="() => showConfirmDelete = false">Cancel</MudButton>
                                </div>
                            </MudPopover>
                        </div>
                    </MudItem>
                }
            </MudItem>
        </MudGrid>

        @if (todaysEdition != null)
        {
            <MudPaper>
                <MudItem xs="12">
                    <MudCard Style="cursor: pointer; align-content:center; flex-wrap:wrap" Class="w-100" @onclick="() => NavigateToEdition(todaysEdition.Id)">
                        <PublicImage ImageName="@todaysEdition!.ProfileImage"
                                     ResourceType="MediaServerResource.Edition"
                                     RemSize="12"
                                     CssClass="me-3 img-fluid" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@todaysEdition.Name</MudText>
                            <MudText Typo="Typo.body2">@todaysEdition.Category.Name</MudText>
                            <MudText Typo="Typo.body2">@todaysEdition.Time.ToLocalTime()</MudText>
                            <MudText Typo="Typo.body2">Rating: @todaysEdition.Rating</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudPaper>
        }

        <MudTabs Rounded="true" Centered="true">
            <MudTabPanel Text="Upcoming Editions">
                @if (userHost?.HostPermissions.CreateEdition == true)
                {
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    FullWidth
                    Class="mt-4 mb-4"
                    OnClick="@(() => Navigation.NavigateTo($"/create-edition/{quizId}"))">
                        Create Edition
                    </MudButton>
                    <MudDivider Class="my-4" />
                }
                @if (!upcomingEditions.Any())
                {
                    <MudText>No upcoming editions available.</MudText>
                }
                else
                {
                    <MudGrid>
                        @foreach (var edition in upcomingEditions)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard Style="cursor: pointer; align-content:center; flex-wrap:wrap" @onclick="() => NavigateToEdition(edition.Id)">
                                    <PublicImage ImageName="@edition.ProfileImage"
                                    ResourceType="MediaServerResource.Edition"
                                    RemSize="12"
                                    CssClass="me-3 img-fluid" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@edition.Name</MudText>
                                        <MudText Typo="Typo.body2">@edition.Category.Name</MudText>
                                        <MudText Typo="Typo.body2">@edition.Time.ToLocalTime()</MudText>
                                        <MudText Typo="Typo.body2">Rating: @edition.Rating</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudTabPanel>

            <MudTabPanel Text="Past Editions">
                @if (!pastEditions.Any())
                {
                    <MudText>No past editions available.</MudText>
                }
                else
                {
                    <MudList T="QuizEditionMinimalDto">
                        @foreach (var edition in pastEditions)
                        {
                            <MudListItem Class="cursor-pointer" @onclick="() => NavigateToEdition(edition.Id)">
                                <MudText Typo="Typo.subtitle2">@edition.Name</MudText>
                                <MudText Typo="Typo.body2">@edition.Time.ToLocalTime() | Rating: @edition.Rating</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudTabPanel>

            <MudTabPanel Text="Leagues">
                @if (userHost?.IsOwner == true)
                {
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    FullWidth
                    Class="mt-4 mb-4"
                    OnClick="@(() => Navigation.NavigateTo($"/create-league/{quizId}"))">
                        Create League
                    </MudButton>
                    <MudDivider Class="my-4" />
                }
                @if (quiz.QuizLeagues == null || !quiz.QuizLeagues.Any())
                {
                    <MudText>No leagues available.</MudText>
                }
                else
                {
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Ongoing Leagues" Expanded="true">
                            @if (!quiz.QuizLeagues.Any(l => !l.Finished))
                            {
                                <MudText Class="pa-2">No ongoing leagues.</MudText>
                            }
                            else
                            {
                                <MudList T="QuizLeagueMinimalDto">
                                    @foreach (var league in quiz.QuizLeagues.Where(l => !l.Finished))
                                    {
                                        <MudListItem Class="cursor-pointer" @onclick="() => NavigateToLeague(league.Id)" >
                                            <MudText Typo="Typo.subtitle1">@league.Name</MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            }
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Finished Leagues">
                            @if (!quiz.QuizLeagues.Any(l => l.Finished))
                            {
                                <MudText Class="pa-2">No finished leagues.</MudText>
                            }
                            else
                            {
                                <MudList T="QuizLeagueMinimalDto">
                                    @foreach (var league in quiz.QuizLeagues.Where(l => l.Finished))
                                    {
                                        <MudListItem Class="cursor-pointer" @onclick="() => NavigateToLeague(league.Id)">
                                            <MudText Typo="Typo.subtitle1">@league.Name</MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            }
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </MudTabPanel>

            <MudTabPanel Text="Hosts">
                @if (hosts == null || !hosts.Any())
                {
                    <MudText>No hosts assigned.</MudText>
                }
                else
                {
                    @foreach (var host in hosts)
                    {
                        <MudPaper Class="pa-3 mb-2">
                            <MudGrid>
                                <MudItem xs="12" sm="1" Class="d-flex justify-center">
                                    <MudAvatar Size="Size.Large">
                                        <MudImage Src="@($"{MediaServerPaths.GetPublicPath(MediaServerResource.User)}{host.UserBrief.ProfileImage}")"
                                        Alt="@host.UserBrief.Username"
                                        Style="width: 100%; height: 100%; object-fit: cover;" />
                                    </MudAvatar>
                                </MudItem>

                                <MudItem xs="12" sm="10">
                                    <MudText Typo="Typo.subtitle1">@host.UserBrief.Username</MudText>
                                    <MudText Typo="Typo.body2">@host.UserBrief.Email</MudText>
                                    <MudText Typo="Typo.caption">Rating: @host.UserBrief.Rating</MudText>
                                </MudItem>

                                @if (userHost?.IsOwner == true && !host.IsOwner)
                                {
                                    <MudItem xs="12" sm="1" Class="d-flex justify-end">
                                        <MudTooltip Text="Remove Host">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                            Color="Color.Error"
                                            OnClick="@(() => ConfirmRemoveHost(host))" />
                                        </MudTooltip>
                                    </MudItem>
                                }

                                <MudItem xs="12">
                                    <MudExpansionPanels Class="mt-2">
                                        <MudExpansionPanel Text="Permissions">
                                            <MudStack Spacing="2">
                                                @foreach (var prop in typeof(HostPermissionsDto).GetProperties())
                                                {
                                                    var value = (bool)(prop.GetValue(host.HostPermissions) ?? false);
                                                    <MudButton StartIcon="@((value ? Icons.Material.Filled.Check : Icons.Material.Filled.Clear))"
                                                    Color="@(value ? Color.Success : Color.Error)"
                                                    Variant="Variant.Text"
                                                    OnClick="() => TogglePermission(host, prop.Name)"
                                                    FullWidth="true"
                                                    Class="justify-start">
                                                        @SplitPermissionName(prop.Name)
                                                    </MudButton>
                                                }
                                            </MudStack>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    }
                }
            </MudTabPanel>

            <MudTabPanel Text="Details">
                <MudText Typo="Typo.h6" Class="mb-2">
                    Categories
                    @if (userHost?.IsOwner == true)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => isEditingCategories = !isEditingCategories)" />
                    }
                </MudText>

                @if (isEditingCategories)
                {
                    <MudAutocomplete T="QCategoryDto"
                    Value="selectedCategory"
                    ValueChanged="AddCategory"
                    ToStringFunc="c => c?.Name"
                    SearchFunc="SearchCategories"
                    Clearable="true"
                    ResetValueOnEmptyText="true"
                    DebounceInterval="300"
                    Placeholder="Add category..." />

                    <div class="d-flex flex-wrap mt-2">
                        @foreach (var cat in quiz.Categories)
                        {
                            <MudChip T="QCategoryDto" OnClose="() => RemoveCategory(cat)" Class="ma-1">@cat.Name</MudChip>
                        }
                    </div>
                }
                else
                {
                    <MudChipSet T="QCategoryDto">
                        @foreach (var cat in quiz.Categories)
                        {
                            <MudChip>@cat.Name</MudChip>
                        }
                    </MudChipSet>
                }

                <MudDivider Class="my-4" />

                <MudText Typo="Typo.h6" Class="mb-2">
                    Locations
                    @if (userHost?.IsOwner == true)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => isEditingLocations = !isEditingLocations)" />
                    }
                </MudText>

                @if (isEditingLocations)
                {
                    <MudAutocomplete T="LocationDetailedDto"
                    Value="selectedLocation"
                    ValueChanged="AddLocation"
                    ToStringFunc="DisplayLocation"
                    SearchFunc="SearchLocations"
                    Clearable="true"
                    ResetValueOnEmptyText="true"
                    DebounceInterval="300"
                    Placeholder="Add location..." />

                    <div class="d-flex flex-wrap mt-2">
                        @foreach (var loc in quiz.Locations)
                        {
                            <MudChip T="LocationBriefDto" OnClose="() => RemoveLocation(loc)" Class="ma-1">
                                @DisplayLocation(loc)
                            </MudChip>
                        }
                    </div>
                }
                else
                {
                    <MudList T="LocationBriefDto">
                        @foreach (var loc in quiz.Locations)
                        {
                            <MudListItem>
                                <MudAvatar Size="Size.Small" Class="me-2">
                                    <MudImage Src="@($"{MediaServerPaths.GetPublicPath(MediaServerResource.Location)}{loc.ProfileImage}")"
                                    Alt="@loc.Name"
                                    Style="width: 100%; height: 100%; object-fit: cover;" />
                                </MudAvatar>
                                <MudText>@DisplayLocation(loc)</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudTabPanel>
        </MudTabs>
    }
</MudPaper>

@code {
    [Parameter] public int quizId { get; set; }

    private QuizDetailedDto? quiz;
    private List<QuizEditionMinimalDto> upcomingEditions = new();
    private List<QuizEditionMinimalDto> pastEditions = new();
    private List<HostDto> hosts = new();
    private UserInfo user = null!;
    private HostDto? userHost;
    private string quizName = string.Empty;
    private bool isEditingName = false;
    private bool isEditingCategories = false;
    private bool isEditingLocations = false;
    private QCategoryDto? selectedCategory;
    private LocationDetailedDto? selectedLocation;
    private List<QCategoryDto> allCategories = new();
    private bool showConfirmDelete = false;
    private MudButton? deleteButtonRef;
    private QuizEditionMinimalDto? todaysEdition;

    protected override async Task OnInitializedAsync()
    {
        quiz = await QuizService.GetDetailedById(quizId);

        if (quiz == null)
        {
            Navigation.NavigateTo("/", true);
            return;
        }

        quizName = quiz.Name;

        var now = DateTime.UtcNow;

        upcomingEditions = quiz.QuizEditions
            .Where(e => e.Time > now)
            .OrderBy(e => e.Time)
            .ToList();

        pastEditions = quiz.QuizEditions
            .Where(e => e.Time <= now)
            .OrderByDescending(e => e.Time)
            .ToList();

        todaysEdition = quiz.QuizEditions
            .Where(x => x.Time.Date == DateTime.UtcNow.Date)
            .FirstOrDefault();

        hosts = await OrganizationService.GetHostsByQuiz(quiz.Id).ContinueWith(x => x.Result.ToList());
        user = await UserInfoService.GetUserInfo();

        userHost = hosts.FirstOrDefault(x => x.UserBrief.Id == user.Id);

        allCategories = await CategoryService.GetAll().ContinueWith(x => x.Result.ToList());
    }

    private void StartEditingName()
    {
        quizName = quiz!.Name;
        isEditingName = true;
    }

    private async void SaveQuizName()
    {
        if (quiz == null || quizName == quiz.Name)
        {
            isEditingName = false;
            return;
        }

        var updateDto = new NewQuizDto
            {
                Id = quiz.Id,
                Name = quizName,
                OrganizationId = quiz.Organization.Id,
                Categories = quiz.Categories.Select(c => c.Id).ToList(),
                Locations = quiz.Locations.Select(l => (int)l.Id!).ToList()
            };

        var updated = await QuizService.Update(updateDto);
        if (updated != null)
        {
            quiz = updated;
            Snackbar.Add("Quiz name updated.", Severity.Success);
        }

        isEditingName = false;

        StateHasChanged();
    }

    private void HandleNameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            SaveQuizName();
        else if (e.Key == "Escape")
        {
            isEditingName = false;
            StateHasChanged();
        }
    }

    private async Task TogglePermission(HostDto host, string permissionName)
    {
        if (userHost?.IsOwner != true)
        {
            Snackbar.Add("You do not have permission to change host permissions.", Severity.Error);

            return;
        }

        var prop = typeof(HostPermissionsDto).GetProperty(permissionName);
        if (prop == null) return;

        var currentValue = (bool)(prop.GetValue(host.HostPermissions) ?? false);

        prop.SetValue(host.HostPermissions, !currentValue);

        var update = new NewHostDto
            {
                HostId = host.UserBrief.Id,
                OrganizerId = quiz!.Organization.Id,
                QuizId = quiz.Id,
                HostPermissions = host.HostPermissions
            };

        var updatedHost = await OrganizationService.UpdateHost(update);
        if (updatedHost != null)
        {
            var index = hosts.FindIndex(h => h.UserBrief.Id == updatedHost.UserBrief.Id);
            if (index != -1)
                hosts[index] = updatedHost;
        }
    }

    private async Task ConfirmRemoveHost(HostDto host)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to remove host {host.UserBrief.Username}?");
        if (!confirmed)
            return;

        await OrganizationService.RemoveHostFromQuiz(
            quiz!.Organization.Id,
            host.UserBrief.Id,
            quiz.Id
        );

        var hostToRemoveItem = hosts.FirstOrDefault(h => h.UserBrief.Id == host.UserBrief.Id);
        if (hostToRemoveItem != null)
        {
            hosts.Remove(hostToRemoveItem);
        }

        Snackbar.Add($"{host.UserBrief.Username} removed from hosts.", Severity.Success);
    }

    private async Task<IEnumerable<LocationDetailedDto>> SearchLocations(string value, CancellationToken cancellationToken)
    {
        try
        {
            return await LocationService.Search(value, 10);
        }
        catch
        {
            return Array.Empty<LocationDetailedDto>();
        }
    }

    private Task<IEnumerable<QCategoryDto>> SearchCategories(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value)) return Task.FromResult(allCategories.AsEnumerable());

        return Task.FromResult(allCategories
            .Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task AddCategory(QCategoryDto? category)
    {
        if (category is null || quiz!.Categories.Any(c => c.Id == category.Id))
            return;

        var newCats = quiz.Categories.ToList();
        newCats.Add(new QCategoryDto { Id = category.Id });
        quiz.Categories = newCats;
        await SaveQuizChanges("Category added.");
        selectedCategory = null;
    }

    private async Task AddLocation(LocationDetailedDto? location)
    {
        if (location is null || quiz!.Locations.Any(l => l.Id == location.Id))
            return;

        var newLocs = quiz.Locations.ToList();
        newLocs.Add(new LocationBriefDto { Id = location.Id });
        quiz.Locations = newLocs;
        await SaveQuizChanges("Location added.");
        selectedLocation = null;
    }

    private void RemoveCategory(QCategoryDto category)
    {
        var newCats = quiz!.Categories.ToList();
        newCats.Remove(category);
        quiz!.Categories = newCats;
        _ = SaveQuizChanges("Category removed.");
    }

    private void RemoveLocation(LocationBriefDto location)
    {
        var newLocs = quiz!.Locations.ToList();
        newLocs.Remove(location);
        quiz!.Locations = newLocs;
        _ = SaveQuizChanges("Location removed.");
    }

    private async Task SaveQuizChanges(string successMessage)
    {
        var dto = new NewQuizDto
            {
                Id = quiz!.Id,
                Name = quiz.Name,
                OrganizationId = quiz.Organization.Id,
                Categories = quiz.Categories.Select(c => c.Id).ToList(),
                Locations = quiz.Locations.Select(l => (int)l.Id!).ToList()
            };

        var updated = await QuizService.Update(dto);

        if (updated != null)
        {
            quiz = updated;
            Snackbar.Add(successMessage, Severity.Success);
            StateHasChanged();
        }
        else
        {
            quiz = await QuizService.GetDetailedById(quizId);
            Snackbar.Add("Something went wrong!", Severity.Error);
            StateHasChanged();
        }
    }

    private async Task HandleQuizImageUpload(IBrowserFile file)
    {
        try
        {
            var imageName = await QuizService.UpdateProfileImage(file, quiz!.Id);
            quiz!.ProfileImage = $"{imageName}?v={Random.Shared.Next()}";
            Snackbar.Add("Image uploaded successfully.", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Image upload failed.", Severity.Error);
        }
    }

    private void NavigateToEdition(int editionId)
    {
        Navigation.NavigateTo($"/edition/{editionId}");
    }

    private string SplitPermissionName(string name)
    {
        return System.Text.RegularExpressions.Regex.Replace(name, "(\\B[A-Z])", " $1");
    }

    private string DisplayLocation(LocationDetailedDto loc) =>
        loc == null ? string.Empty : $"{loc.Name} — {loc.Address}, {loc.City}, {loc.Country}";

    private string DisplayLocation(LocationBriefDto loc) =>
        loc == null ? string.Empty : $"{loc.Name} — {loc.Address}, {loc.City}, {loc.Country}";

    private void NavigateToLeague(int leagueId)
    {
        Navigation.NavigateTo($"/league/{leagueId}");
    }

    private async Task DeleteQuiz()
    {
        showConfirmDelete = false;

        await QuizService.Delete(quiz!.Id);
        Navigation.NavigateTo($"/organization/{quiz.Organization.Id}");
    }
}
