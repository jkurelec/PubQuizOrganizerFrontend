@inject ITeamService TeamService
@inject IQuizEditionApplicationService QuizEditionApplicationService
@inject ISnackbar Snackbar
@inject UserInfoService UserInfoService

<MudDialog>
    <DialogContent>
        @if (loading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="my-4" />
        }
        else if (selectedTeam == null)
        {
            <MudList T="TeamRegisterDto" Dense="true">
                @foreach (var team in teams)
                {
                    <MudListItem Class="cursor-pointer" OnClick="() => SelectTeam(team)">
                        @team.Name
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudText Typo="Typo.h6">Select Team Members (max @MaxTeamSize)</MudText>
            <MudList T="UserBriefDto" Dense="true">
                @foreach (var member in sortedMembers)
                {
                    <MudListItem>
                        <MudCheckBox T="bool" @bind-Value="selectedUserIds[member.Id]" Label="@($"{member.Username} {member.Rating}")" />
                    </MudListItem>
                }
            </MudList>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
        @if (selectedTeam != null)
        {
            <MudButton OnClick="ConfirmSelection" Color="Color.Primary" Disabled="@(!selectedUserIds.Any())">Confirm</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter] public int EditionId { get; set; }
    [Parameter] public int MaxTeamSize { get; set; }

    private List<TeamRegisterDto> teams = new();
    private TeamRegisterDto? selectedTeam;
    private List<UserBriefDto> sortedMembers = new();
    private Dictionary<int, bool> selectedUserIds = new();
    private int? currentUserId;

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUserId = (await UserInfoService.GetUserInfoAsync())?.Id;
            teams = (await TeamService.GetTeamsForRegistration(EditionId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load teams: " + ex.Message, Severity.Error);
            MudDialog.Close(DialogResult.Ok(true));
        }

        loading = false;
    }

    private void SelectTeam(TeamRegisterDto team)
    {
        selectedTeam = team;

        sortedMembers = team.Memebers
            .OrderByDescending(m => m.Id == currentUserId)
            .ThenBy(m => m.Username)
            .ToList();

        foreach (var member in selectedTeam.Memebers)
        {
            selectedUserIds.Add(member.Id, currentUserId == member.Id ? true : false);
        }
    }

    private async Task ConfirmSelection()
    {
        if (GetSelectedCount() == 0)
        {
            Snackbar.Add("Please select at least one member.", Severity.Warning);
            return;
        }

        if (GetSelectedCount() > MaxTeamSize)
        {
            Snackbar.Add($"Please select up to {MaxTeamSize} members.", Severity.Warning);
            return;
        }

        var selectedIds = new List<int>();

        foreach (var entry in selectedUserIds)
        {
            if (entry.Value == true)
                selectedIds.Add(entry.Key);
        }

        await QuizEditionApplicationService.ApplyForQuiz(
            new ()
            {
                EditionId = EditionId,
                TeamId = selectedTeam!.Id,
                UserIds = selectedIds
            }
        );

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private void OnMembersSelected(TeamRegisterDto team, List<int> memberIds)
    {
        Console.WriteLine($"Selected team: {team.Name}, Members: {string.Join(", ", memberIds)}");
    }

    private int GetSelectedCount()
    {
        return selectedUserIds.Where(x => x.Value == true).Count();
    }
}
